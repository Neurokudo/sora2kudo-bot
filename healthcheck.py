#!/usr/bin/env python3
"""
‚úÖ Health Check for SORA 2 –æ—Ç Neurokudo
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
"""

import os
import sys
from typing import List


def check_env() -> bool:
    """‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = [
        "BOT_TOKEN",
        "OPENAI_API_KEY", 
        "DATABASE_URL",
        "YOOKASSA_SECRET_KEY",
        "YOOKASSA_SHOP_ID",
        "PUBLIC_URL"
    ]
    
    # ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = [
        "TELEGRAM_MODE",
        "PORT",
        "DEBUG"
    ]
    
    print("üîç Checking environment variables...")
    print("=" * 40)
    
    missing_required = []
    missing_optional = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_required.append(var)
            print(f"‚ùå {var}: NOT SET")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_value = mask_secret(value)
            print(f"‚úÖ {var}: {masked_value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    print("\nüìã Optional variables:")
    for var in optional_vars:
        value = os.getenv(var)
        if not value:
            missing_optional.append(var)
            print(f"‚ö†Ô∏è  {var}: NOT SET (will use default)")
        else:
            print(f"‚úÖ {var}: {value}")
    
    print("\n" + "=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if missing_required:
        print(f"‚ùå Missing required environment variables: {missing_required}")
        print("üîß Please set these variables in Railway Dashboard ‚Üí Variables")
        return False
    
    if missing_optional:
        print(f"‚ö†Ô∏è  Missing optional variables: {missing_optional}")
        print("‚ÑπÔ∏è  These will use default values")
    
    print("‚úÖ All required environment variables are set and safe!")
    return True


def mask_secret(secret: str) -> str:
    """‚úÖ –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if len(secret) <= 8:
        return "***"
    
    return f"{secret[:4]}...{secret[-4:]}"


def check_secrets_in_code() -> bool:
    """‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –∫–æ–¥–µ –Ω–µ—Ç –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    
    dangerous_patterns = [
        r'sk-[a-zA-Z0-9]{20,}',
        r'live_[a-zA-Z0-9_-]{20,}',
        r'test_[a-zA-Z0-9_-]{20,}',
        r'[0-9]{8,10}:[a-zA-Z0-9_-]{35}',
    ]
    
    print("\nüîí Checking for hardcoded secrets in code...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º security_check.py
    import subprocess
    try:
        result = subprocess.run(['python3', 'security_check.py'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ No secrets found in code")
            return True
        else:
            print("‚ùå Secrets found in code!")
            print(result.stdout)
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not run security check: {e}")
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å


def main():
    """‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è health check"""
    print("üè• SORA 2 –æ—Ç Neurokudo - Health Check")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = check_env()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ
    secrets_ok = check_secrets_in_code()
    
    print("\n" + "=" * 50)
    
    if env_ok and secrets_ok:
        print("üéâ HEALTH CHECK PASSED!")
        print("‚úÖ Ready for deployment")
        sys.exit(0)
    else:
        print("‚ùå HEALTH CHECK FAILED!")
        print("üîß Fix issues before deployment")
        sys.exit(1)


if __name__ == "__main__":
    main()
