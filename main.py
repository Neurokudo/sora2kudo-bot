import os
import logging
import asyncio
import uuid
from datetime import datetime
from aiohttp import web
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from yookassa import Configuration, Payment

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
from translations import get_text, is_rtl_language
from utils.keyboards import main_menu, language_selection, orientation_menu, tariff_selection

# === CONFIGURATION ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL")
TELEGRAM_MODE = os.getenv("TELEGRAM_MODE", "webhook")
PORT = int(os.getenv("PORT", 8080))
DATABASE_URL = os.getenv("DATABASE_URL")
SUPPORT_CHAT_ID = os.getenv("SUPPORT_CHAT_ID", "-1002454833654")

# YooKassa configuration
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN not found in environment variables")

if not PUBLIC_URL:
    raise RuntimeError("‚ùå PUBLIC_URL not found in environment variables")

if not DATABASE_URL:
    raise RuntimeError("‚ùå DATABASE_URL not found in environment variables")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
    logging.info("‚úÖ YooKassa configured")
else:
    logging.warning("‚ö†Ô∏è YooKassa credentials not found, payments will be disabled")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === DATABASE CONNECTION ===
db_pool = None

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    global db_pool
    
    try:
        logging.info("‚úÖ Connecting to DATABASE_URL...")
        logging.info(f"üîç DATABASE_URL format: {DATABASE_URL[:20]}...{DATABASE_URL[-10:]}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        db_pool = await asyncpg.create_pool(
            DATABASE_URL,
            min_size=1,
            max_size=10,
            command_timeout=10
        )
        logging.info("‚úÖ Database connected successfully.")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        async with db_pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'users'
                )
            """)
            
            if not table_exists:
                logging.info("üìã Creating table 'users'...")
                await conn.execute('''
                            CREATE TABLE users (
                                id SERIAL PRIMARY KEY,
                                user_id BIGINT UNIQUE,
                                username TEXT,
                                first_name TEXT,
                                plan_name TEXT DEFAULT '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞',
                                videos_left INT DEFAULT 0,
                                total_payments INT DEFAULT 0,
                                language TEXT DEFAULT 'en',
                                created_at TIMESTAMP DEFAULT NOW()
                            )
                ''')
                logging.info("‚úÖ Table 'users' created successfully.")
            else:
                logging.info("‚úÖ Table 'users' already exists.")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ language –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                await conn.execute('''
                    ALTER TABLE users ADD COLUMN IF NOT EXISTS language TEXT DEFAULT 'en'
                ''')
                logging.info("‚úÖ Language column checked/added.")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ user_id
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id)
            ''')
            
        logging.info("‚úÖ Table 'users' ready")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Database initialization failed: {e}")
        logging.error("‚ö†Ô∏è Bot will continue without database functionality")
        db_pool = None
        return False

async def get_user(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, returning default user data")
        return {
            'user_id': user_id,
            'plan_name': '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞',
            'videos_left': 0,
            'total_payments': 0,
            'language': 'en'
        }
        
    try:
        async with db_pool.acquire() as conn:
            user = await conn.fetchrow(
                "SELECT * FROM users WHERE user_id = $1", user_id
            )
            return user
    except Exception as e:
        logging.error(f"‚ùå Error getting user {user_id}: {e}")
        return None

async def create_user(user_id: int, username: str = None, first_name: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping user creation")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            result = await conn.execute('''
                INSERT INTO users (user_id, username, first_name)
                VALUES ($1, $2, $3)
                ON CONFLICT (user_id) DO NOTHING
            ''', user_id, username, first_name)
            
            if "INSERT" in result:
                logging.info(f"‚úÖ Created new user {user_id} ({first_name})")
            else:
                logging.info(f"‚úÖ User {user_id} already exists")
                
        return True
    except Exception as e:
        logging.error(f"‚ùå Error creating user {user_id}: {e}")
        return False

async def update_user_videos(user_id: int, videos_left: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∏–¥–µ–æ"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping video update")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET videos_left = $2 WHERE user_id = $1
            ''', user_id, videos_left)
        logging.info(f"‚úÖ Updated user {user_id} videos to {videos_left}")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error updating user videos {user_id}: {e}")
        return False

async def update_user_language(user_id: int, language: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping language update")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET language = $2 WHERE user_id = $1
            ''', user_id, language)
        logging.info(f"‚úÖ Updated user {user_id} language to {language}")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error updating user language {user_id}: {e}")
        return False

async def update_user_tariff(user_id: int, tariff_name: str, videos_count: int, payment_amount: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping tariff update")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET 
                    plan_name = $2, 
                    videos_left = $3, 
                    total_payments = total_payments + $4 
                WHERE user_id = $1
            ''', user_id, tariff_name, videos_count, payment_amount)
        logging.info(f"‚úÖ Updated user {user_id} tariff to {tariff_name} with {videos_count} videos")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error updating user tariff {user_id}: {e}")
        return False

# === GLOBAL STATES ===
user_waiting_for_support = set()
user_waiting_for_video_orientation = {}

# === MAIN MENU ===
# –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ utils/keyboards.py

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await get_user(user_id)
    if not user:
        await create_user(user_id, username, first_name)
        user = await get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = user.get('language', 'en') if user else 'en'
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    if not user or not user.get('language'):
        await message.answer(
            get_text('en', "choose_language"),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            reply_markup=language_selection()
        )
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    safe_first_name = getattr(message.from_user, 'first_name', None) or "friend"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_text = get_text(
        user_language, 
        "welcome",
        name=safe_first_name,
        plan=user.get('plan_name', 'trial'),
        videos_left=user.get('videos_left', 3)
    )
    
    await message.answer(
        welcome_text,
        reply_markup=main_menu(user_language)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    await message.answer(
        get_text(user_language, "choose_orientation"),
        reply_markup=orientation_menu(user_language)
    )

# === /help ===
@dp.message(Command("help"))
async def cmd_help_command(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    user_waiting_for_support.add(user_id)
    await message.answer(
        get_text(user_language, "help_text"),
        reply_markup=main_menu(user_language)
    )

# === CALLBACK: Language choice ===
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if callback.data.startswith("lang_"):
        language = callback.data.replace("lang_", "")
        first_name = getattr(callback.from_user, 'first_name', None) or "friend"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await update_user_language(user_id, language)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else language
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            get_text(user_language, "lang_selected")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        welcome_text = get_text(
            user_language, 
            "welcome",
            name=first_name,
            plan=user.get('plan_name', 'trial') if user else 'trial',
            videos_left=user.get('videos_left', 3) if user else 3
        )
        
        await callback.message.answer(
            welcome_text,
            reply_markup=main_menu(user_language)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        await callback.message.answer(
            get_text(user_language, "choose_orientation"),
            reply_markup=orientation_menu(user_language)
        )
        
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    if callback.data == "orientation_vertical":
        user_waiting_for_video_orientation[user_id] = "vertical"
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        
        await callback.message.edit_text(
            get_text(
                user_language, 
                "orientation_selected",
                orientation=get_text(user_language, "orientation_vertical_name")
            )
        )
    elif callback.data == "orientation_horizontal":
        user_waiting_for_video_orientation[user_id] = "horizontal"
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        
        await callback.message.edit_text(
            get_text(
                user_language, 
                "orientation_selected",
                orientation=get_text(user_language, "orientation_horizontal_name")
            )
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    elif callback.data == "buy_trial":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_payment(callback, "trial", 490, user_language)
    elif callback.data == "buy_basic":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_payment(callback, "basic", 1290, user_language)
    elif callback.data == "buy_maximum":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_payment(callback, "maximum", 2990, user_language)
    
    await callback.answer()

# === DEFAULT HANDLER ===
@dp.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if user_id in user_waiting_for_support:
        username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
        full_name = message.from_user.full_name
        chat_text = (
            f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({full_name})\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
        )
        try:
            await bot.send_message(SUPPORT_CHAT_ID, chat_text, parse_mode="HTML")
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        user_waiting_for_support.remove(user_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (—Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞)
    if text in [get_text(lang, "btn_create_video") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_create_video(message, user_language)
    elif text in [get_text(lang, "btn_examples") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_examples(message, user_language)
    elif text in [get_text(lang, "btn_profile") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_profile(message, user_language)
    elif text in [get_text(lang, "btn_help") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await cmd_help(message, user_language)
    elif text in [get_text(lang, "btn_language") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_language_selection(message)
    elif text in [get_text(lang, "btn_buy_tariff") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_buy_tariff(message, user_language)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, —Ç–æ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
        if user_id in user_waiting_for_video_orientation and user_waiting_for_video_orientation[user_id]:
            await handle_video_description(message, user_language)
        else:
            await message.answer(
                get_text(user_language, "use_buttons"),
                reply_markup=main_menu(user_language)
            )

async def handle_create_video(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ'"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
    if user_id not in user_waiting_for_video_orientation or not user_waiting_for_video_orientation[user_id]:
        await message.answer(
            get_text(user_language, "choose_orientation"),
            reply_markup=orientation_menu(user_language)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    user = await get_user(user_id)
    if user and user['videos_left'] <= 0:
        await message.answer(
            get_text(user_language, "no_videos_left"),
            reply_markup=main_menu(user_language)
        )
        return
    
    orientation = user_waiting_for_video_orientation[user_id]
    orientation_text = get_text(user_language, f"orientation_{orientation}_name")
    
    await message.answer(
        get_text(
            user_language,
            "create_video",
            orientation=orientation_text,
            videos_left=user['videos_left'] if user else 3
        ),
        reply_markup=main_menu(user_language)
    )

async def handle_examples(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ—Ä—ã'"""
    await message.answer(
        get_text(user_language, "examples"),
        reply_markup=main_menu(user_language)
    )

async def handle_profile(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–∞–±–∏–Ω–µ—Ç'"""
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await message.answer(get_text(user_language, "error_getting_data"))
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    safe_name = user.get('first_name') or getattr(message.from_user, 'first_name', None) or "Not specified"
    
    profile_text = get_text(
        user_language,
        "profile",
        name=safe_name,
        plan=user['plan_name'],
        videos_left=user['videos_left'],
        payments=user['total_payments'],
        date=user['created_at'].strftime('%d.%m.%Y') if user.get('created_at') else "Unknown"
    )
    
    await message.answer(profile_text, reply_markup=main_menu(user_language))

async def handle_video_description(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id
    text = message.text.strip()
    orientation = user_waiting_for_video_orientation.get(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(user_id)
    if not user:
        await message.answer(get_text(user_language, "error_restart"))
        return
    
    if user['videos_left'] <= 0:
        await message.answer(
            get_text(user_language, "no_videos_left"),
            reply_markup=main_menu(user_language)
        )
        return
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    await update_user_videos(user_id, user['videos_left'] - 1)
    
    orientation_text = get_text(user_language, f"orientation_{orientation}_name")
    
    await message.answer(
        get_text(
            user_language,
            "video_accepted",
            description=text,
            orientation=orientation_text,
            videos_left=user['videos_left'] - 1
        ),
        reply_markup=main_menu(user_language)
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_waiting_for_video_orientation:
        del user_waiting_for_video_orientation[user_id]

async def cmd_help(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_waiting_for_support.add(message.from_user.id)
    await message.answer(
        get_text(user_language, "help_text"),
        reply_markup=main_menu(user_language)
    )

async def handle_language_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await message.answer(
        get_text('en', "choose_language"),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        reply_markup=language_selection()
    )

async def handle_buy_tariff(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_text = get_text(user_language, "tariff_selection")
    await message.answer(
        tariff_text,
        reply_markup=tariff_selection(user_language)
    )

async def create_payment(user_id: int, tariff: str, price: int, videos_count: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment.create({
            "amount": {
                "value": str(price),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"{PUBLIC_URL}/payment_success"
            },
            "capture": True,
            "description": f"–¢–∞—Ä–∏—Ñ {tariff} –¥–ª—è SORA 2 –±–æ—Ç–∞ - {videos_count} –≤–∏–¥–µ–æ",
            "metadata": {
                "user_id": str(user_id),
                "tariff": tariff,
                "videos_count": str(videos_count)
            }
        }, payment_id)
        
        return payment
    except Exception as e:
        logging.error(f"‚ùå Error creating payment: {e}")
        return None

async def handle_payment(callback: types.CallbackQuery, tariff: str, price: int, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = callback.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    tariff_videos = {
        "trial": 3,
        "basic": 10,
        "maximum": 30
    }
    
    videos_count = tariff_videos.get(tariff, 0)
    
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        # –ï—Å–ª–∏ YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        payment_text = f"üí≥ <b>–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞</b>\n\nüé¨ –¢–∞—Ä–∏—Ñ: <b>{tariff}</b>\nüí∞ –¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\nüéû –í–∏–¥–µ–æ: <b>{videos_count}</b>\n\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        await callback.message.edit_text(payment_text)
        await callback.answer()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        payment = await create_payment(user_id, tariff, price, videos_count)
        
        if payment:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_url = payment.confirmation.confirmation_url
            
            payment_text = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff}</b>\n\nüí∞ –°—É–º–º–∞: <b>{price} ‚ÇΩ</b>\nüéû –í–∏–¥–µ–æ: <b>{videos_count}</b>\n\nüîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n{payment_url}\n\nüì± –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
            
            await callback.message.edit_text(payment_text)
            await callback.answer()
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            
    except Exception as e:
        logging.error(f"‚ùå Error in handle_payment: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

# === WEBHOOK HANDLERS ===
async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return web.Response()
    except KeyError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook (KeyError): {e}")
        return web.Response(status=200)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return web.Response(status=200)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å

async def health(request):
    """Health check –¥–ª—è Railway"""
    return web.Response(text="OK")

async def yookassa_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç YooKassa"""
    try:
        data = await request.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if data.get('event') == 'payment.succeeded':
            payment_data = data.get('object', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = payment_data.get('metadata', {})
            user_id = int(metadata.get('user_id'))
            tariff = metadata.get('tariff')
            videos_count = int(metadata.get('videos_count'))
            amount = payment_data.get('amount', {}).get('value')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tariff_names = {
                "trial": "–ü—Ä–æ–±–Ω—ã–π",
                "basic": "–ë–∞–∑–æ–≤—ã–π", 
                "maximum": "–ú–∞–∫—Å–∏–º—É–º"
            }
            
            tariff_name = tariff_names.get(tariff, tariff)
            await update_user_tariff(user_id, tariff_name, videos_count, int(amount))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                success_text = f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\nüé¨ –¢–∞—Ä–∏—Ñ: <b>{tariff_name}</b>\nüéû –í–∏–¥–µ–æ: <b>{videos_count}</b>\nüí∞ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ!"
                await bot.send_message(user_id, success_text)
            except Exception as e:
                logging.error(f"‚ùå Error sending success message to user {user_id}: {e}")
        
        return web.Response(text="OK")
        
    except Exception as e:
        logging.error(f"‚ùå Error in YooKassa webhook: {e}")
        return web.Response(text="Error", status=500)

# === WEB APPLICATION ===
def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post("/webhook", handle_webhook)
    app.router.add_post("/yookassa_webhook", yookassa_webhook)
    app.router.add_get("/health", health)
    
    return app

# === MAIN FUNCTION ===
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ webhook –∏–ª–∏ polling —Ä–µ–∂–∏–º–µ"""
    logging.info("üöÄ Launching sora2kudo-bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_ready = await init_database()
    if not db_ready:
        logging.warning("‚ö†Ô∏è Database initialization failed, bot will continue with limited functionality")
    
    if TELEGRAM_MODE == "webhook":
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
        logging.info(f"üåê Setting up webhook: {PUBLIC_URL}/webhook")
        await bot.set_webhook(f"{PUBLIC_URL}/webhook")
        logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        logging.info(f"üöÄ Starting web server on port {PORT}")
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        logging.info("üöÄ Bot is running.")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logging.info("üõë Stopping bot...")
            await runner.cleanup()
            if db_pool:
                await db_pool.close()
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logging.info("üîÑ Starting bot in polling mode")
        try:
            await dp.start_polling(bot)
        except KeyboardInterrupt:
            logging.info("üõë Stopping bot...")
            if db_pool:
                await db_pool.close()

if __name__ == "__main__":
    asyncio.run(start_bot())