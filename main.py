import os
import logging
import asyncio
import uuid
import json
from datetime import datetime
import aiohttp
from aiohttp import web
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from yookassa import Configuration, Payment

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
from translations import get_text, is_rtl_language
from utils.keyboards import main_menu, language_selection, orientation_menu, tariff_selection
from examples import EXAMPLES, get_categories, get_examples_from_category, get_example, get_category_name
from tribute_subscription import create_subscription, get_tariff_info

# –ò–º–ø–æ—Ä—Ç Sora client
from sora_client import create_sora_task, extract_user_from_param

# === CONFIGURATION ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL")
TELEGRAM_MODE = os.getenv("TELEGRAM_MODE", "webhook")
PORT = int(os.getenv("PORT", 8080))
DATABASE_URL = os.getenv("DATABASE_URL")
SUPPORT_CHAT_ID = os.getenv("SUPPORT_CHAT_ID", "-4863150171")
logging.info(f"üÜò SUPPORT_CHAT_ID initialized: {SUPPORT_CHAT_ID} (type: {type(SUPPORT_CHAT_ID)})")

if not SUPPORT_CHAT_ID:
    logging.error("‚ùå SUPPORT_CHAT_ID is not set!")
elif SUPPORT_CHAT_ID == "-4863150171":
    logging.warning("‚ö†Ô∏è SUPPORT_CHAT_ID is using default value. Check Railway environment variables!")

# YooKassa configuration
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

# Tribute configuration
TRIBUTE_API_KEY = os.getenv("TRIBUTE_API_KEY")

# Sora 2 API configuration
SORA_API_KEY = os.getenv("SORA_API_KEY")
SORA_API_URL = os.getenv("SORA_API_URL", "https://api.sora2.com/v1/videos")

# KIE.AI Sora-2 configuration
KIE_API_KEY = os.getenv("KIE_API_KEY")
KIE_API_URL = os.getenv("KIE_API_URL", "https://api.kie.ai/api/v1/jobs/createTask")

# === TARIFF CONFIGURATION ===
tariff_videos = {
    "trial": 3,
    "basic": 10,
    "maximum": 30
}

tariff_prices = {
    "trial": 390,
    "basic": 990,
    "maximum": 2190
}

tariff_names = {
    "trial": "üå± –ü—Ä–æ–±–Ω—ã–π",
    "basic": "‚ú® –ë–∞–∑–æ–≤—ã–π",
    "maximum": "üíé –ú–∞–∫—Å–∏–º—É–º"
}

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN not found in environment variables")

if not PUBLIC_URL:
    raise RuntimeError("‚ùå PUBLIC_URL not found in environment variables")

if not DATABASE_URL:
    raise RuntimeError("‚ùå DATABASE_URL not found in environment variables")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
    logging.info("‚úÖ YooKassa configured")
else:
    logging.warning("‚ö†Ô∏è YooKassa credentials not found, payments will be disabled")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === DATABASE CONNECTION ===
db_pool = None

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    global db_pool
    
    try:
        logging.info("‚úÖ Connecting to DATABASE_URL...")
        logging.info(f"üîç DATABASE_URL format: {DATABASE_URL[:20]}...{DATABASE_URL[-10:]}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        db_pool = await asyncpg.create_pool(
            DATABASE_URL,
            min_size=1,
            max_size=10,
            command_timeout=10
        )
        logging.info("‚úÖ Database connected successfully.")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        async with db_pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'users'
                )
            """)
            
            if not table_exists:
                logging.info("üìã Creating table 'users'...")
                await conn.execute('''
                            CREATE TABLE users (
                                id SERIAL PRIMARY KEY,
                                user_id BIGINT UNIQUE,
                                username TEXT,
                                first_name TEXT,
                                plan_name TEXT DEFAULT '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞',
                                videos_left INT DEFAULT 0,
                                total_payments INT DEFAULT 0,
                                language TEXT DEFAULT 'en',
                                created_at TIMESTAMP DEFAULT NOW()
                            )
                ''')
                logging.info("‚úÖ Table 'users' created successfully.")
            else:
                logging.info("‚úÖ Table 'users' already exists.")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ language –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                await conn.execute('''
                    ALTER TABLE users ADD COLUMN IF NOT EXISTS language TEXT DEFAULT 'en'
                ''')
                logging.info("‚úÖ Language column checked/added.")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å trial –Ω–∞ "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞"
                await conn.execute('''
                    UPDATE users SET plan_name = '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞', videos_left = 0 
                    WHERE plan_name = 'trial'
                ''')
                trial_users_updated = await conn.fetchval('''
                    SELECT COUNT(*) FROM users WHERE plan_name = '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞'
                ''')
                if trial_users_updated and trial_users_updated > 0:
                    logging.info(f"‚úÖ Updated {trial_users_updated} users from 'trial' to '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞'")
                
                # –ò–∑–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await conn.execute('''
                    ALTER TABLE users ALTER COLUMN plan_name SET DEFAULT '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞'
                ''')
                await conn.execute('''
                    ALTER TABLE users ALTER COLUMN videos_left SET DEFAULT 0
                ''')
                logging.info("‚úÖ Updated default values: plan_name='–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞', videos_left=0")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ user_id
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id)
            ''')
            
        logging.info("‚úÖ Table 'users' ready")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Database initialization failed: {e}")
        logging.error("‚ö†Ô∏è Bot will continue without database functionality")
        db_pool = None
        return False

async def get_user(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, returning default user data")
        return {
            'user_id': user_id,
            'plan_name': '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞',
            'videos_left': 0,
            'total_payments': 0,
            'language': 'en'
        }
        
    try:
        async with db_pool.acquire() as conn:
            user = await conn.fetchrow(
                "SELECT * FROM users WHERE user_id = $1", user_id
            )
            return user
    except Exception as e:
        logging.error(f"‚ùå Error getting user {user_id}: {e}")
        return None

async def create_user(user_id: int, username: str = None, first_name: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping user creation")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            result = await conn.execute('''
                INSERT INTO users (user_id, username, first_name)
                VALUES ($1, $2, $3)
                ON CONFLICT (user_id) DO NOTHING
            ''', user_id, username, first_name)
            
            if "INSERT" in result:
                logging.info(f"‚úÖ Created new user {user_id} ({first_name})")
            else:
                logging.info(f"‚úÖ User {user_id} already exists")
                
        return True
    except Exception as e:
        logging.error(f"‚ùå Error creating user {user_id}: {e}")
        return False

async def update_user_videos(user_id: int, videos_left: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∏–¥–µ–æ"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping video update")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET videos_left = $2 WHERE user_id = $1
            ''', user_id, videos_left)
        logging.info(f"‚úÖ Updated user {user_id} videos to {videos_left}")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error updating user videos {user_id}: {e}")
        return False

async def update_user_language(user_id: int, language: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping language update")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET language = $2 WHERE user_id = $1
            ''', user_id, language)
        logging.info(f"‚úÖ Updated user {user_id} language to {language}")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error updating user language {user_id}: {e}")
        return False

async def update_user_tariff(user_id: int, tariff_name: str, videos_count: int, payment_amount: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    if not db_pool:
        logging.warning("‚ö†Ô∏è Database not available, skipping tariff update")
        return False
        
    try:
        async with db_pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
            current_videos = await conn.fetchval(
                "SELECT videos_left FROM users WHERE user_id = $1", user_id
            )
            
            # –°—É–º–º–∏—Ä—É–µ–º —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            total_videos = (current_videos or 0) + videos_count
            
            await conn.execute('''
                UPDATE users SET 
                    plan_name = $2, 
                    videos_left = $3, 
                    total_payments = total_payments + $4 
                WHERE user_id = $1
            ''', user_id, tariff_name, total_videos, payment_amount)
        logging.info(f"‚úÖ Updated user {user_id} tariff to {tariff_name}: {current_videos or 0} + {videos_count} = {total_videos} videos")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error updating user tariff {user_id}: {e}")
        return False

async def create_sora_video(description: str, orientation: str, user_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Sora 2 API"""
    if not SORA_API_KEY:
        logging.warning("‚ö†Ô∏è SORA_API_KEY not found, using demo mode")
        return None, "demo_mode"
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Sora 2 API
        aspect_ratio = "9:16" if orientation == "vertical" else "16:9"
        
        payload = {
            "prompt": description,
            "aspect_ratio": aspect_ratio,
            "duration": 5,  # 5 —Å–µ–∫—É–Ω–¥
            "quality": "hd",
            "metadata": {
                "user_id": str(user_id),
                "orientation": orientation
            }
        }
        
        headers = {
            "Authorization": f"Bearer {SORA_API_KEY}",
            "Content-Type": "application/json",
            "User-Agent": "SORA2Bot/1.0"
        }
        
        logging.info(f"üé¨ Creating Sora video for user {user_id}: {description[:50]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Sora 2 API
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
            async with session.post(SORA_API_URL, json=payload, headers=headers) as response:
                response_text = await response.text()
                logging.info(f"üé¨ Sora API response status: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    video_url = data.get("video_url")
                    video_id = data.get("id")
                    
                    if video_url:
                        logging.info(f"‚úÖ Sora video created successfully: {video_id}")
                        return video_url, video_id
                    else:
                        logging.error(f"‚ùå No video URL in response: {data}")
                        return None, "no_url"
                else:
                    logging.error(f"‚ùå Sora API error: {response.status} - {response_text}")
                    return None, f"api_error_{response.status}"
                    
    except aiohttp.ClientError as e:
        logging.error(f"‚ùå Network error creating Sora video: {e}")
        # –ï—Å–ª–∏ —ç—Ç–æ demo —Ä–µ–∂–∏–º (–Ω–µ—Ç API –∫–ª—é—á–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º demo_mode
        if not SORA_API_KEY:
            return None, "demo_mode"
        return None, "network_error"
    except Exception as e:
        logging.error(f"‚ùå Unexpected error creating Sora video: {e}")
        return None, "unknown_error"

# === GLOBAL STATES ===
user_waiting_for_support = set()
user_waiting_for_video_orientation = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–º–µ—Ä–æ–≤
user_example_category = {}  # {user_id: category_name}
user_example_index = {}     # {user_id: current_index}
user_example_for_creation = {}  # {user_id: description} - –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ

# –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ
user_task_messages = {}  # {user_id: message_id} - —Å–æ–æ–±—â–µ–Ω–∏—è "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Sora 2!"

# === EXAMPLES: CATEGORY PAGINATION ===
CATEGORIES_PER_PAGE = 6

def build_categories_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    categories = get_categories()
    start = page * CATEGORIES_PER_PAGE
    end = start + CATEGORIES_PER_PAGE
    page_items = categories[start:end]

    keyboard: list[list[InlineKeyboardButton]] = []
    for category_key in page_items:
        category_name = get_category_name(category_key)
        keyboard.append([InlineKeyboardButton(text=category_name, callback_data=f"category_{category_key}")])

    nav_row: list[InlineKeyboardButton] = []
    if start > 0:
        nav_row.append(InlineKeyboardButton(text="‚è™", callback_data=f"catpage_{page-1}"))
    if end < len(categories):
        nav_row.append(InlineKeyboardButton(text="‚è©", callback_data=f"catpage_{page+1}"))
    if nav_row:
        keyboard.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# === MAIN MENU ===
# –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ utils/keyboards.py

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await get_user(user_id)
    if not user:
        await create_user(user_id, username, first_name)
        user = await get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = user.get('language', 'en') if user else 'en'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    await message.answer(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:</b>",
        reply_markup=language_selection()
    )
    return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    safe_first_name = getattr(message.from_user, 'first_name', None) or "friend"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞—Ä–∏—Ñ
    user_plan = user.get('plan_name', '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞')
    user_videos_left = user.get('videos_left', 0)
    
    if user_plan == '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞' and user_videos_left == 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞
        await message.answer(
            get_text(user_language, "no_tariff_message"),
            reply_markup=tariff_selection(user_language)
        )
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            reply_markup=main_menu(user_language)
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞—Ä–∏—Ñ–æ–º
        welcome_text = get_text(
            user_language, 
            "welcome",
            name=safe_first_name,
            plan=user_plan,
            videos_left=user_videos_left
        )
        
        await message.answer(
            welcome_text,
            reply_markup=main_menu(user_language)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        await message.answer(
            get_text(user_language, "choose_orientation"),
            reply_markup=orientation_menu(user_language)
        )

# === /help ===
@dp.message(Command("help"))
async def cmd_help_command(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    user_id = message.from_user.id
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    user_waiting_for_support.add(user_id)
    await message.answer(
        get_text(user_language, "help_text"),
        reply_markup=main_menu(user_language)
    )

# === /examples ===
@dp.message(Command("examples"))
async def cmd_examples(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /examples"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    
    user_id = message.from_user.id
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    await handle_examples(message, user_language)

# === /profile ===
@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    
    user_id = message.from_user.id
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    await handle_profile(message, user_language)

# === /language ===
@dp.message(Command("language"))
async def cmd_language(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /language"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    
    await handle_language_selection(message)

# === /create ===
@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    
    user_id = message.from_user.id
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    await message.answer(
        get_text(user_language, "choose_orientation"),
        reply_markup=orientation_menu(user_language)
    )

# === /buy ===
@dp.message(Command("buy"))
async def cmd_buy(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /buy - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        return
    
    user_id = message.from_user.id
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    await handle_buy_tariff(message, user_language)

# === CALLBACK: Language choice ===
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if callback.data.startswith("lang_"):
        language = callback.data.replace("lang_", "")
        first_name = getattr(callback.from_user, 'first_name', None) or "friend"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await update_user_language(user_id, language)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else language
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            get_text(user_language, "lang_selected")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        welcome_text = get_text(
            user_language, 
            "welcome",
            name=first_name,
            plan=user.get('plan_name', '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞') if user else '–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞',
            videos_left=user.get('videos_left', 0) if user else 0
        )
        
        await callback.message.answer(
            welcome_text,
            reply_markup=main_menu(user_language)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        await callback.message.answer(
            get_text(user_language, "choose_orientation"),
            reply_markup=orientation_menu(user_language)
        )
        
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    if callback.data == "orientation_vertical":
        user_waiting_for_video_orientation[user_id] = "vertical"
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        if user_id in user_example_for_creation:
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            description = user_example_for_creation[user_id]
            del user_example_for_creation[user_id]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await handle_video_description_from_example(callback, description)
        else:
            # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            await callback.message.edit_text(
                get_text(
                    user_language, 
                    "orientation_selected",
                    orientation=get_text(user_language, "orientation_vertical_name")
                )
            )
    elif callback.data == "orientation_horizontal":
        user_waiting_for_video_orientation[user_id] = "horizontal"
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        if user_id in user_example_for_creation:
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            description = user_example_for_creation[user_id]
            del user_example_for_creation[user_id]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await handle_video_description_from_example(callback, description)
        else:
            # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            await callback.message.edit_text(
                get_text(
                    user_language,
                    "orientation_selected",
                    orientation=get_text(user_language, "orientation_horizontal_name")
                )
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    elif callback.data == "buy_trial":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_payment(callback, "trial", tariff_prices["trial"], user_language)
    elif callback.data == "buy_basic":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_payment(callback, "basic", tariff_prices["basic"], user_language)
    elif callback.data == "buy_maximum":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_payment(callback, "maximum", tariff_prices["maximum"], user_language)
    elif callback.data == "buy_foreign":
        user = await get_user(user_id)
        user_language = user.get('language', 'en') if user else 'en'
        await handle_foreign_payment(callback, user_language)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫ Tribute
    elif callback.data.startswith("sub_"):
        tariff = callback.data.replace("sub_", "")
        tariff_info = get_tariff_info(tariff)
        
        if not tariff_info:
            await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Tribute
        web_app_link = await create_subscription(user_id, tariff)
        
        if web_app_link:
            subscription_text = (
                f"üåç <b>Subscription plan: {tariff_info['name']}</b>\n\n"
                f"üí∞ <b>${tariff_info['price_usd']}</b> per month\n"
                f"üé¨ {tariff_info['videos']} videos monthly\n"
                f"üîÑ Auto-renewal\n\n"
                f"üí≥ Click the button below to proceed to payment:"
            )
            
            pay_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ PROCEED TO PAYMENT", url=web_app_link)],
                [InlineKeyboardButton(text="üîô Back to subscriptions", callback_data="foreign_payment")]
            ])
            
            await callback.message.edit_text(
                subscription_text,
                reply_markup=pay_button,
                parse_mode="HTML"
            )
            logging.info(f"‚úÖ Subscription created for user {user_id}, tariff {tariff}")
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await callback.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
    elif callback.data.startswith("category_"):
        category_key = callback.data.replace("category_", "")
        user_example_category[user_id] = category_key
        user_example_index[user_id] = 0
        await show_example(callback, category_key, 0)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º
    elif callback.data == "example_prev":
        category_key = user_example_category.get(user_id)
        if category_key:
            examples = get_examples_from_category(category_key)
            if examples:
                current_index = user_example_index.get(user_id, 0)
                prev_index = (current_index - 1) % len(examples)
                user_example_index[user_id] = prev_index
                await show_example(callback, category_key, prev_index)
    
    elif callback.data == "example_next":
        category_key = user_example_category.get(user_id)
        if category_key:
            examples = get_examples_from_category(category_key)
            if examples:
                current_index = user_example_index.get(user_id, 0)
                next_index = (current_index + 1) % len(examples)
                user_example_index[user_id] = next_index
                await show_example(callback, category_key, next_index)
    
    elif callback.data == "example_back_to_categories":
        await show_categories(callback, 0)
    
    elif callback.data.startswith("catpage_"):
        try:
            page = int(callback.data.replace("catpage_", ""))
        except Exception:
            page = 0
        await show_categories(callback, page)
    
    elif callback.data == "example_create_video":
        category_key = user_example_category.get(user_id)
        current_index = user_example_index.get(user_id, 0)
        if category_key:
            example = get_example(category_key, current_index)
            if example:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
                user_example_for_creation[user_id] = example['description']
                
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                user = await get_user(user_id)
                user_language = user.get('language', 'en') if user else 'en'
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                await callback.message.edit_text(
                    get_text(user_language, "choose_orientation"),
                    reply_markup=orientation_menu(user_language)
                )
    
    await callback.answer()

# === DEFAULT HANDLER ===
@dp.message()
async def handle_text(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.chat.id == int(SUPPORT_CHAT_ID):
        logging.info(f"üÜò Ignoring message from support group: {message.chat.id}")
        return
    
    user_id = message.from_user.id
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if user_id in user_waiting_for_support:
        logging.info(f"üÜò User {user_id} is writing to support. SUPPORT_CHAT_ID: {SUPPORT_CHAT_ID}")
        username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
        full_name = message.from_user.full_name
        chat_text = (
            f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({full_name})\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
        )
        try:
            logging.info(f"üÜò Sending support message to chat ID: {SUPPORT_CHAT_ID}")
            logging.info(f"üÜò Message content: {chat_text[:100]}...")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            support_chat_id = int(SUPPORT_CHAT_ID)
            logging.info(f"üÜò Converted to int: {support_chat_id}")
            
            result = await bot.send_message(support_chat_id, chat_text, parse_mode="HTML")
            logging.info(f"‚úÖ Support message sent successfully to {support_chat_id}")
            logging.info(f"‚úÖ Message ID: {result.message_id}")
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
            logging.error(f"‚ùå SUPPORT_CHAT_ID: {SUPPORT_CHAT_ID}, Type: {type(SUPPORT_CHAT_ID)}")
            logging.error(f"‚ùå Full error details: {str(e)}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        user_waiting_for_support.remove(user_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(user_id)
    user_language = user.get('language', 'en') if user else 'en'
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (—Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞)
    if text in [get_text(lang, "btn_create_video") for lang in ["ru", "en", "es", "ar", "hi"]]:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        await message.answer(
            get_text(user_language, "choose_orientation"),
            reply_markup=orientation_menu(user_language)
        )
    elif text in [get_text(lang, "btn_examples") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_examples(message, user_language)
    elif text in [get_text(lang, "btn_profile") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_profile(message, user_language)
    elif text in [get_text(lang, "btn_help") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await cmd_help(message, user_language)
    elif text in [get_text(lang, "btn_language") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_language_selection(message)
    elif text in [get_text(lang, "btn_buy_tariff") for lang in ["ru", "en", "es", "ar", "hi"]]:
        await handle_buy_tariff(message, user_language)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, —Ç–æ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
        if user_id in user_waiting_for_video_orientation and user_waiting_for_video_orientation[user_id]:
            await handle_video_description(message, user_language)
        else:
            await message.answer(
                get_text(user_language, "use_buttons"),
                reply_markup=main_menu(user_language)
            )

async def handle_examples(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ—Ä—ã' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    markup = build_categories_keyboard(0)
    text = "üé¨ <b>–ì–æ—Ç–æ–≤—ã–µ –∏–¥–µ–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ!</b>\n\n<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –ø—Ä–∏–º–µ—Ä\n2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç\n3Ô∏è‚É£ –í—Å—Ç–∞–≤—å –≤ –±–æ—Ç –∏ —Å–æ–∑–¥–∞–π –≤–∏–¥–µ–æ!\n–ò–ª–∏ –∏–∑–º–µ–Ω–∏ –ø–æ–¥ —Å–≤–æ—é –∏–¥–µ—é üí°\n\n<b>–ö–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ üëá</b>"
    await message.answer(text, reply_markup=markup)

async def handle_profile(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–∞–±–∏–Ω–µ—Ç'"""
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await message.answer(get_text(user_language, "error_getting_data"))
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    safe_name = user.get('first_name') or getattr(message.from_user, 'first_name', None) or "Not specified"
    
    profile_text = get_text(
        user_language,
        "profile",
        name=safe_name,
        plan=user['plan_name'],
        videos_left=user['videos_left'],
        date=user['created_at'].strftime('%d.%m.%Y') if user.get('created_at') else "Unknown"
    )
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    tariff_buttons = tariff_selection(user_language)
    
    await message.answer(profile_text, reply_markup=tariff_buttons)

async def handle_video_description(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id
    text = message.text.strip()
    orientation = user_waiting_for_video_orientation.get(user_id)
    
    logging.info(f"üé¨ Starting video creation for user {user_id}: {text[:50]}... (orientation: {orientation})")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(user_id)
    if not user:
        await message.answer(get_text(user_language, "error_restart"))
        return
    
    if user['videos_left'] <= 0:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ
        await message.answer(
            get_text(user_language, "no_videos_left"),
            reply_markup=tariff_selection(user_language)
        )
        return
    
    orientation_text = get_text(user_language, f"orientation_{orientation}_name")
    
    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ
    creating_msg = await message.answer(
        get_text(user_language, "video_creating")
    )
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await update_user_videos(user_id, user['videos_left'] - 1)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º aspect_ratio –¥–ª—è KIE.AI
        aspect_ratio = "portrait" if orientation == "vertical" else "landscape"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ KIE.AI Sora-2 API
        task_id, status = await create_sora_task(
            prompt=text, 
            aspect_ratio=aspect_ratio, 
            user_id=user_id
        )
        
        if task_id and status == "success":
            # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ KIE.AI
            task_msg = await creating_msg.edit_text(
                f"‚ú® <b>–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Sora 2!</b>\n\nüé¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{text}</i>\n\nüÜî <b>ID –∑–∞–¥–∞—á–∏:</b> <code>{task_id}</code>\n‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ\n\nüìπ <b>–í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>",
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_task_messages[user_id] = task_msg.message_id
            # –ú–µ–Ω—é —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
            logging.info(f"‚úÖ Sora task created for user {user_id}: {task_id}")
        else:
            # –û—à–∏–±–∫–∞ –∏–ª–∏ demo —Ä–µ–∂–∏–º
            if status == "demo_mode":
                # –í demo —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
                await asyncio.sleep(3)
                await creating_msg.edit_text(
                    "üé¨ <b>–î–µ–º–æ —Ä–µ–∂–∏–º</b>\n\n‚ö†Ô∏è KIE.AI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\nüîÑ –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ\n\n" +
                    get_text(user_language, "video_ready", videos_left=user['videos_left'] - 1)
                )
                # –ú–µ–Ω—é —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ
                await update_user_videos(user_id, user['videos_left'])
                
                await creating_msg.edit_text(
                    get_text(user_language, "video_error", videos_left=user['videos_left'])
                )
                # –ú–µ–Ω—é —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                
    except Exception as e:
        logging.error(f"‚ùå Critical error in handle_video_description: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –ª—é–±–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        try:
            await update_user_videos(user_id, user['videos_left'])
            logging.info(f"‚úÖ Returned video to user {user_id} due to critical error")
        except Exception as db_error:
            logging.error(f"‚ùå Failed to return video to user {user_id}: {db_error}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await creating_msg.edit_text(
                get_text(user_language, "video_error", videos_left=user['videos_left'])
            )
            # –ú–µ–Ω—é —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        except Exception as msg_error:
            logging.error(f"‚ùå Failed to send error message: {msg_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –í–∏–¥–µ–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\nüéû –û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ: {user['videos_left']}"
                )
            except:
                logging.error("‚ùå Complete failure to notify user about error")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_waiting_for_video_orientation:
        del user_waiting_for_video_orientation[user_id]

async def cmd_help(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    logging.info(f"üÜò User {user_id} clicked Help button. Adding to support queue.")
    user_waiting_for_support.add(user_id)
    logging.info(f"üÜò Users waiting for support: {user_waiting_for_support}")
    await message.answer(
        get_text(user_language, "help_text"),
        reply_markup=main_menu(user_language)
    )

async def handle_language_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await message.answer(
        get_text('en', "choose_language"),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        reply_markup=language_selection()
    )

async def handle_buy_tariff(message: types.Message, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_text = get_text(user_language, "tariff_selection")
    await message.answer(
        tariff_text,
        reply_markup=tariff_selection(user_language)
    )

async def create_payment(user_id: int, tariff: str, price: int, videos_count: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment.create({
            "amount": {
                "value": str(price),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"{PUBLIC_URL}/payment_success"
            },
            "capture": True,
            "description": f"–¢–∞—Ä–∏—Ñ {tariff} –¥–ª—è SORA 2 –±–æ—Ç–∞ - {videos_count} –≤–∏–¥–µ–æ",
            "metadata": {
                "user_id": str(user_id),
                "tariff": tariff,
                "videos_count": str(videos_count)
            }
        }, payment_id)
        
        return payment
    except Exception as e:
        logging.error(f"‚ùå Error creating payment: {e}")
        return None

async def handle_payment(callback: types.CallbackQuery, tariff: str, price: int, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏ —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    videos_count = tariff_videos.get(tariff, 0)
    price = tariff_prices.get(tariff, price)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ fallback
    
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        # –ï—Å–ª–∏ YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        payment_text = f"üí≥ <b>–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞</b>\n\nüé¨ –¢–∞—Ä–∏—Ñ: <b>{tariff}</b>\nüí∞ –¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\nüéû –í–∏–¥–µ–æ: <b>{videos_count}</b>\n\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        await callback.message.edit_text(payment_text)
        await callback.answer()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        payment = await create_payment(user_id, tariff, price, videos_count)
        
        if payment:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_url = payment.confirmation.confirmation_url
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            tariff_display_name = tariff_names.get(tariff, tariff)
            
            payment_text = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_display_name}</b>\n\nüí∞ –°—É–º–º–∞: <b>{price} ‚ÇΩ</b>\nüéû –í–∏–¥–µ–æ: <b>{videos_count}</b>\n\nüì± –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            pay_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨", url=payment_url)]
            ])
            
            await callback.message.edit_text(payment_text, reply_markup=pay_button)
            await callback.answer()
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            
    except Exception as e:
        logging.error(f"‚ùå Error in handle_payment: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

async def handle_foreign_payment(callback: types.CallbackQuery, user_language: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tribute (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã) - –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = callback.from_user.id
    
    logging.info(f"üåç Processing foreign payment for user {user_id}")
    
    if not TRIBUTE_API_KEY:
        logging.warning("‚ö†Ô∏è TRIBUTE_API_KEY not found")
        payment_text = f"üåç <b>–û–ø–ª–∞—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π</b>\n\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        await callback.message.edit_text(payment_text)
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    subscription_text = "üåç <b>Foreign Card Subscriptions</b>\n\nüí≥ Choose your monthly subscription plan:"
    
    subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå± Trial ‚Äî $5 / month", callback_data="sub_trial")],
        [InlineKeyboardButton(text="‚ú® Basic ‚Äî $12 / month", callback_data="sub_basic")],
        [InlineKeyboardButton(text="üíé Premium ‚Äî $25 / month", callback_data="sub_maximum")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_tariff")]
    ])
    
    await callback.message.edit_text(
        subscription_text,
        reply_markup=subscription_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# === WEBHOOK HANDLERS ===
async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return web.Response()
    except KeyError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook (KeyError): {e}")
        return web.Response(status=200)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return web.Response(status=200)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å

async def health(request):
    """Health check –¥–ª—è Railway"""
    return web.Response(text="OK")

async def yookassa_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç YooKassa"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        raw_data = await request.text()
        logging.info(f"üí≥ YooKassa webhook received: {raw_data}")
        
        data = await request.json()
        logging.info(f"üí≥ YooKassa webhook parsed data: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = data.get('event')
        logging.info(f"üí≥ YooKassa event type: {event_type}")
        
        if event_type == 'payment.succeeded':
            payment_data = data.get('object', {})
            logging.info(f"üí≥ Payment data: {payment_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = payment_data.get('metadata', {})
            user_id = int(metadata.get('user_id'))
            tariff = metadata.get('tariff')
            videos_count = int(metadata.get('videos_count'))
            amount = payment_data.get('amount', {}).get('value')
            
            logging.info(f"üí≥ Processing payment for user {user_id}, tariff {tariff}, videos {videos_count}, amount {amount}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tariff_name = tariff_names.get(tariff, tariff)
            success = await update_user_tariff(user_id, tariff_name, videos_count, int(float(amount)))
            logging.info(f"üí≥ User tariff update result: {success}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                success_text = f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\nüé¨ –¢–∞—Ä–∏—Ñ: <b>{tariff_name}</b>\nüéû –í–∏–¥–µ–æ: <b>{videos_count}</b>\nüí∞ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ!"
                await bot.send_message(user_id, success_text)
                logging.info(f"üí≥ Success message sent to user {user_id}")
            except Exception as e:
                logging.error(f"‚ùå Error sending success message to user {user_id}: {e}")
        else:
            logging.info(f"üí≥ YooKassa event {event_type} ignored")
        
        return web.Response(text="OK")
        
    except Exception as e:
        logging.error(f"‚ùå Error in YooKassa webhook: {e}")
        import traceback
        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return web.Response(text="Error", status=500)

async def tribute_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Tribute –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤"""
    try:
        data = await request.json()
        logging.info(f"üé¨ Tribute donation webhook received: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Tribute
        event_name = data.get('name')
        payload = data.get('payload', {})
        
        if event_name == 'new_donation':
            # –ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ
            telegram_user_id = payload.get('telegram_user_id')
            amount = payload.get('amount', 0)
            
            if telegram_user_id:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ (50 –≤–∏–¥–µ–æ –∑–∞ $10)
                videos_to_add = 50
                await update_user_videos(telegram_user_id, videos_to_add)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_message(
                        telegram_user_id,
                        f"üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n‚úÖ –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\nüé¨ –í–∏–¥–µ–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {videos_to_add}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                    )
                    logging.info(f"‚úÖ Tribute donation processed for user {telegram_user_id}")
                except Exception as e:
                    logging.error(f"‚ùå Error sending success message to user {telegram_user_id}: {e}")
        
        elif event_name == 'recurrent_donation':
            # –†–µ–≥—É–ª—è—Ä–Ω—ã–π –¥–æ–Ω–∞—Ç
            telegram_user_id = payload.get('telegram_user_id')
            if telegram_user_id:
                videos_to_add = 50
                await update_user_videos(telegram_user_id, videos_to_add)
                
                try:
                    await bot.send_message(
                        telegram_user_id,
                        f"üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {videos_to_add}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                    )
                except Exception as e:
                    logging.error(f"‚ùå Error sending recurrent payment message to user {telegram_user_id}: {e}")
        
        return web.Response(text="OK")
        
    except Exception as e:
        logging.error(f"‚ùå Error in Tribute donation webhook: {e}")
        return web.Response(text="Error", status=500)

async def tribute_subscription_webhook(request):
    """Webhook –æ—Ç Tribute –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        data = await request.json()
        signature = request.headers.get("trbt-signature")
        logging.info(f"üé¨ Tribute webhook received: {data}")
        logging.info(f"üßæ Tribute signature: {signature}")

        event_name = data.get("name")
        payload = data.get("payload", {})
        metadata = payload.get("metadata", {})

        logging.info(f"üéØ Event: {event_name}, payload: {payload}")

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Tribute —Å–æ–±—ã—Ç–∏–π
        if event_name == "new_subscription" or event_name == "new_digital_product":
            telegram_user_id = payload.get("telegram_user_id")
            if not telegram_user_id:
                logging.error("‚ùå Missing telegram_user_id in payload")
                return web.Response(text="Missing user", status=400)

            tariff = metadata.get("tariff", "unknown")
            videos_count = int(metadata.get("videos_count", 0))
            price_usd = metadata.get("price_usd", "0")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if videos_count > 0:
                await update_user_videos(telegram_user_id, videos_count)
                try:
                    await bot.send_message(
                        telegram_user_id,
                        f"üéâ <b>Subscription activated!</b>\n\n"
                        f"‚úÖ Plan: <b>{tariff}</b>\n"
                        f"üé¨ Videos added: <b>{videos_count}</b>\n"
                        f"üí∞ Price: <b>${price_usd}/month</b>\n\n"
                        f"üîÑ Subscription will auto-renew monthly"
                    )
                    logging.info(f"‚úÖ Tribute subscription activated for user {telegram_user_id}")
                except Exception as e:
                    logging.error(f"‚ùå Error sending confirmation: {e}")

        elif event_name == "cancelled_subscription":
            telegram_user_id = payload.get("telegram_user_id")
            if telegram_user_id:
                try:
                    await bot.send_message(
                        telegram_user_id,
                        "‚ùå <b>Subscription cancelled</b>\n\n"
                        "Your subscription has been cancelled, but remaining videos will stay until the end of this month."
                    )
                    logging.info(f"‚úÖ Subscription cancelled for user {telegram_user_id}")
                except Exception as e:
                    logging.error(f"‚ùå Error sending cancellation: {e}")

        return web.Response(text="OK")

    except Exception as e:
        logging.error(f"‚ùå Error in Tribute subscription webhook: {e}")
        import traceback
        logging.error(traceback.format_exc())
        return web.Response(text="Error", status=500)

async def sora_callback(request):
    """Callback –æ—Ç Kie.AI Sora-2 ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
    try:
        data = await request.json()
        logging.info(f"üé¨ Sora callback received: {data}")
        
        if data.get("code") == 200 and data["data"]["state"] == "success":
            result_json = data["data"]["resultJson"]
            param = data["data"].get("param", "")
            user_id = extract_user_from_param(param)
            
            if user_id:
                video_urls = json.loads(result_json).get("resultUrls", [])
                if video_urls:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Sora 2!" –µ—Å–ª–∏ –µ—Å—Ç—å
                    if user_id in user_task_messages:
                        try:
                            await bot.delete_message(user_id, user_task_messages[user_id])
                            del user_task_messages[user_id]
                        except Exception as e:
                            logging.warning(f"‚ö†Ô∏è Could not delete task message for user {user_id}: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL
                        await bot.send_video(
                            user_id, 
                            video=video_urls[0],
                            caption="üéâ <b>–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüé¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Sora 2",
                            parse_mode="HTML"
                        )
                        
                        logging.info(f"‚úÖ Video sent directly to user {user_id}: {video_urls[0]}")
                        
                    except Exception as e:
                        logging.error(f"‚ùå Direct video send failed for user {user_id}: {e}")
                        
                        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
                        try:
                            import aiohttp
                            import tempfile
                            import os
                            
                            async with aiohttp.ClientSession() as session:
                                async with session.get(video_urls[0]) as response:
                                    if response.status == 200:
                                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
                                            temp_file.write(await response.read())
                                            temp_file_path = temp_file.name
                                        
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª
                                        with open(temp_file_path, 'rb') as video_file:
                                            await bot.send_video(
                                                user_id,
                                                video=video_file,
                                                caption="üéâ <b>–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüé¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Sora 2",
                                                parse_mode="HTML"
                                            )
                                        
                                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                        os.unlink(temp_file_path)
                                        
                                        logging.info(f"‚úÖ Video downloaded and sent to user {user_id}")
                                    else:
                                        raise Exception(f"Failed to download video: HTTP {response.status}")
                                        
                        except Exception as download_error:
                            logging.error(f"‚ùå Video download failed for user {user_id}: {download_error}")
                            
                            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                            try:
                                await bot.send_message(
                                    user_id, 
                                    f"üéâ <b>–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüé¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Sora 2\nüìπ <a href='{video_urls[0]}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>",
                                    parse_mode="HTML"
                                )
                                logging.info(f"‚úÖ Fallback link sent to user {user_id}")
                            except Exception as fallback_error:
                                logging.error(f"‚ùå Fallback error: {fallback_error}")
                    
                    # –ú–µ–Ω—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
                else:
                    logging.error(f"‚ùå No video URLs in result: {result_json}")
            else:
                logging.error(f"‚ùå Could not extract user_id from param: {param}")
        else:
            logging.warning(f"üé¨ Sora callback error: {data}")
            
        return web.Response(text="OK")
        
    except Exception as e:
        logging.error(f"‚ùå Error in sora_callback: {e}")
        return web.Response(text="Error", status=500)

# === WEB APPLICATION ===
def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post("/webhook", handle_webhook)
    app.router.add_post("/yookassa_webhook", yookassa_webhook)
    app.router.add_post("/webhook/yookassa", yookassa_webhook)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è YooKassa
    app.router.add_post("/tribute_webhook", tribute_webhook)  # Webhook –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ Tribute
    app.router.add_post("/tribute_subscription_webhook", tribute_subscription_webhook)  # Webhook –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ Tribute
    app.router.add_post("/sora_callback", sora_callback)  # Callback –æ—Ç Kie.AI Sora-2
    app.router.add_get("/health", health)
    
    return app

# === EXAMPLES SYSTEM FUNCTIONS ===

def build_categories_keyboard(page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —Ä–∞–∑–¥–µ–ª–æ–≤ (6+6+6+2)"""
    categories = get_categories()
    categories_per_page = [6, 6, 6, 2]  # 6+6+6+2 = 20 –∫–Ω–æ–ø–æ–∫
    total_pages = len(categories_per_page)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if page >= total_pages:
        page = 0
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = sum(categories_per_page[:page])
    end_idx = start_idx + categories_per_page[page]
    page_categories = categories[start_idx:end_idx]
    
    keyboard = []
    for category_key in page_categories:
        category_name = get_category_name(category_key)
        keyboard.append([InlineKeyboardButton(text=category_name, callback_data=f"category_{category_key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0 and page < total_pages - 1:
        # –°—Ä–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –ù–∞–∑–∞–¥ + –ï—â–µ
        nav_buttons.append(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"catpage_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(text="‚è© –ï—â–µ", callback_data=f"catpage_{page+1}"))
    elif page > 0:
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Ç–æ–ª—å–∫–æ –ù–∞–∑–∞–¥
        nav_buttons.append(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"catpage_{page-1}"))
    elif page < total_pages - 1:
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Ç–æ–ª—å–∫–æ –ï—â–µ –ø—Ä–∏–º–µ—Ä—ã
        nav_buttons.append(InlineKeyboardButton(text="‚è© –ï—â–µ –ø—Ä–∏–º–µ—Ä—ã", callback_data=f"catpage_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def show_categories(callback: types.CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    markup = build_categories_keyboard(page)
    text = "üé¨ <b>–ì–æ—Ç–æ–≤—ã–µ –∏–¥–µ–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ!</b>\n\n<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –ø—Ä–∏–º–µ—Ä\n2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç\n3Ô∏è‚É£ –í—Å—Ç–∞–≤—å –≤ –±–æ—Ç –∏ —Å–æ–∑–¥–∞–π –≤–∏–¥–µ–æ!\n–ò–ª–∏ –∏–∑–º–µ–Ω–∏ –ø–æ–¥ —Å–≤–æ—é –∏–¥–µ—é üí°\n\n<b>–ö–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ üëá</b>"
    await callback.message.edit_text(text, reply_markup=markup)

async def show_example(callback: types.CallbackQuery, category_key: str, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    examples = get_examples_from_category(category_key)
    if not examples:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
    if index >= len(examples) or index < 0:
        index = 0
        
    example = examples[index]
    category_name = get_category_name(category_key)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="example_prev"),
            InlineKeyboardButton(text="‚ñ∂Ô∏è –°–æ–∑–¥–∞—Ç—å", callback_data="example_create_video"),
            InlineKeyboardButton(text="‚è© –î–∞–ª–µ–µ", callback_data="example_next")
        ],
        [InlineKeyboardButton(text="‚èπÔ∏è –î—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª", callback_data="example_back_to_categories")]
    ]
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    text = f"üìö <b>{category_name}</b>\n\n<b>{example['title']}</b>\n\n<code>{example['description']}</code>\n\n<i>{index + 1} –∏–∑ {len(examples)}</i>"
    
    await callback.message.edit_text(text, reply_markup=markup)

# === MAIN FUNCTION ===
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ webhook –∏–ª–∏ polling —Ä–µ–∂–∏–º–µ"""
    try:
        logging.info("üöÄ Launching sora2kudo-bot...")
        logging.info(f"üîß BOT_TOKEN: {'‚úÖ Set' if BOT_TOKEN else '‚ùå Missing'}")
        logging.info(f"üîß PUBLIC_URL: {'‚úÖ Set' if PUBLIC_URL else '‚ùå Missing'}")
        logging.info(f"üîß DATABASE_URL: {'‚úÖ Set' if DATABASE_URL else '‚ùå Missing'}")
        logging.info(f"üîß TELEGRAM_MODE: {TELEGRAM_MODE}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_ready = await init_database()
        if not db_ready:
            logging.warning("‚ö†Ô∏è Database initialization failed, bot will continue with limited functionality")
    except Exception as e:
        logging.error(f"‚ùå Error in start_bot initialization: {e}")
        raise
    
    try:
        if TELEGRAM_MODE == "webhook":
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
            logging.info(f"üåê Setting up webhook: {PUBLIC_URL}/webhook")
            await bot.set_webhook(f"{PUBLIC_URL}/webhook")
            logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = create_app()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            logging.info(f"üöÄ Starting web server on port {PORT}")
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logging.info("üöÄ Bot is running.")
            
            # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logging.info("üõë Stopping bot...")
                await runner.cleanup()
                if db_pool:
                    await db_pool.close()
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logging.info("üîÑ Starting bot in polling mode")
            
            try:
                await dp.start_polling(bot)
            except KeyboardInterrupt:
                logging.info("üõë Stopping bot...")
                if db_pool:
                    await db_pool.close()
    except Exception as e:
        logging.error(f"‚ùå Critical error in start_bot: {e}")
        logging.error(f"‚ùå Error type: {type(e).__name__}")
        import traceback
        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")
        raise


async def handle_video_description_from_example(callback: types.CallbackQuery, description: str):
    """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≤–∏–¥–µ–æ
    user = await get_user(user_id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    user_language = user.get('language', 'en')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    if user['videos_left'] <= 0:
        await callback.message.edit_text(get_text(user_language, "no_videos_left"), reply_markup=tariff_selection(user_language))
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
    orientation = user_waiting_for_video_orientation.get(user_id, "vertical")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        creating_msg = await callback.message.edit_text(
            get_text(user_language, "video_creating")
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        await update_user_videos(user_id, user['videos_left'] - 1)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤ aspect_ratio –¥–ª—è Sora API
        aspect_ratio = "portrait" if orientation == "vertical" else "landscape"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Sora
        task_id, status = await create_sora_task(description, aspect_ratio, user_id=user_id)
        
        if task_id and status == "success":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–º–ø—Ç–æ–º
            task_msg = await creating_msg.edit_text(
                f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Sora 2!</b>\n\nüé¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{description}</i>\n\nüÜî <b>ID –∑–∞–¥–∞—á–∏:</b> <code>{task_id}</code>\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_task_messages[user_id] = task_msg.message_id
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await callback.message.answer(
                "üé¨ –í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ
            await update_user_videos(user_id, user['videos_left'])
            
            error_text = get_text(user_language, "video_error", videos_left=user['videos_left'])
            await creating_msg.edit_text(error_text)
            
            # –ú–µ–Ω—é —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            
    except Exception as e:
        logging.error(f"‚ùå Error creating video from example: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        await update_user_videos(user_id, user['videos_left'])
        
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    asyncio.run(start_bot())