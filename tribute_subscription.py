# app/services/tribute_subscription.py
import aiohttp
import os
import logging

TRIBUTE_API_KEY = os.getenv("TRIBUTE_API_KEY")
TRIBUTE_API_URL = os.getenv("TRIBUTE_API_URL", "https://tribute.tg/api/v1")
PUBLIC_URL = os.getenv("PUBLIC_URL", "https://sora2kudo-bot-production.up.railway.app")

# –¢–∞—Ä–∏—Ñ–Ω–∞—è —Å–µ—Ç–∫–∞
TARIFFS = {
    "trial": {"name": "üå± –ü—Ä–æ–±–Ω—ã–π", "price_rub": 390, "videos": 3, "price_usd": 4},
    "basic": {"name": "‚ú® –ë–∞–∑–æ–≤—ã–π", "price_rub": 990, "videos": 10, "price_usd": 10},
    "maximum": {"name": "üíé –ú–∞–∫—Å–∏–º—É–º", "price_rub": 2190, "videos": 30, "price_usd": 22}
}

async def create_subscription(user_id: int, tariff: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ Tribute"""
    if not TRIBUTE_API_KEY:
        logging.error("‚ùå TRIBUTE_API_KEY not found")
        return None
        
    if tariff not in TARIFFS:
        logging.error(f"‚ùå Unknown tariff: {tariff}")
        return None
    
    tariff_data = TARIFFS[tariff]
    
    headers = {
        "Api-Key": TRIBUTE_API_KEY, 
        "Content-Type": "application/json",
        "User-Agent": "SORA2Bot/1.0"
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Tribute API
    payload = {
        "subscription_name": f"{tariff_data['name']} - SORA 2 Bot",
        "amount": tariff_data["price_usd"] * 100,  # –≤ —Ü–µ–Ω—Ç–∞—Ö
        "currency": "usd",
        "period": "monthly",
        "description": f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ {tariff_data['name']} - {tariff_data['videos']} –≤–∏–¥–µ–æ –≤ –º–µ—Å—è—Ü",
        "metadata": {
            "user_id": str(user_id),
            "tariff": tariff,
            "videos_count": str(tariff_data['videos']),
            "price_rub": str(tariff_data['price_rub'])
        }
    }
    
    logging.info(f"üåç Creating Tribute subscription for user {user_id}, tariff {tariff}: {payload}")
    
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            async with session.post(
                f"{TRIBUTE_API_URL}/subscriptions", 
                headers=headers, 
                json=payload
            ) as response:
                
                response_text = await response.text()
                logging.info(f"üåç Tribute subscription API response status: {response.status}")
                logging.info(f"üåç Tribute subscription API response: {response_text}")
                
                if response.status == 200:
                    try:
                        data = await response.json()
                        web_app_link = data.get("web_app_link")
                        
                        if web_app_link:
                            logging.info(f"‚úÖ Tribute subscription created successfully for user {user_id}")
                            return web_app_link
                        else:
                            logging.error(f"‚ùå No web_app_link in subscription response: {data}")
                            return None
                    except Exception as json_error:
                        logging.error(f"‚ùå JSON parsing error in subscription: {json_error}")
                        return None
                else:
                    logging.error(f"‚ùå Tribute subscription API error: {response.status} - {response_text}")
                    return None
                    
    except aiohttp.ClientError as e:
        logging.error(f"‚ùå HTTP error in subscription creation: {e}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Unexpected error in subscription creation: {e}")
        return None

def get_tariff_info(tariff: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ"""
    return TARIFFS.get(tariff)

def get_all_tariffs():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã"""
    return TARIFFS
